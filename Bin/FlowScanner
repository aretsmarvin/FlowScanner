"""
Main module with file observer for FlowScanner
"""

#! /usr/bin/env python

import os
import time
import logging
import dotenv

from watchdog.events import PatternMatchingEventHandler
from watchdog.observers import Observer

from FlowScanner.Parser.Nfdump import Nfdump
from FlowScanner.Tools.FlowFilter import FlowFilter
from FlowScanner.Tools.ScanFilter import ScanFilter
from FlowScanner.Tools.Scans import PerformScans

LOGLEVEL = os.getenv('loglevel', 'INFO').upper()
logging.basicConfig(
    handlers=[
        logging.FileHandler("FlowScanner.log"),
        logging.StreamHandler()
    ],
    format='%(asctime)s %(levelname)s:%(message)s',
    encoding='utf-8',
    level=LOGLEVEL)

if __name__ == "__main__":
    logging.info('Application startup')
    patterns = ["*"]
    new_flow_file_handler = PatternMatchingEventHandler(patterns, None, False, True)
    nfdump = Nfdump()
    flow_filter = FlowFilter()
    scan_filter = ScanFilter()

def OnCreated(event):
    """
    Event handler for when new file is created. Waits untill creation of
    file is completely done.
    """
    logging.debug('OnCreated event handler called.')
    last_modified = os.path.getmtime(event.src_path)
    while last_modified is not None:
        current = os.path.getmtime(event.src_path)
        time.sleep(1)
        if current == last_modified:
            last_modified = None
    flow_list = None
    server_list = None
    flow_list = nfdump.Filter(event.src_path)
    server_list = flow_filter.ServerFilter(flow_list)
    scan_list = scan_filter.ScanTargetFilter(server_list)
    logging.info('Begin scanning.')
    PerformScans(scan_list)
    logging.info('Scanning done.')
    try:
        os.remove(event.src_path)
    except OSError as exception:
        logging.error("Couldn't remove flow file: %s", str(exception))

new_flow_file_handler.on_created = OnCreated

PATH = os.getenv('flow_files_folder')
flow_file_observer = Observer()
flow_file_observer.schedule(new_flow_file_handler, PATH, False)

flow_file_observer.start()

try:
    while True:
        time.sleep(1)
except KeyboardInterrupt:
    logging.info("Application exit (keyboard interrupt).")
    flow_file_observer.stop()
    flow_file_observer.join()

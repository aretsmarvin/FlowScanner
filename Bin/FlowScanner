"""
Main module with file observer for FlowScanner
"""

#! /usr/bin/env python

import os
import time
import logger
import sys
import dotenv

from watchdog.events import PatternMatchingEventHandler
from watchdog.observers import Observer

from FlowScanner.Parser.Nfdump import Nfdump
from FlowScanner.Tools.FlowFilter import FlowFilter
from FlowScanner.Tools.Scans import PerformScans
import FlowScanner

LOGLEVEL = os.getenv('loglevel', 'INFO').upper()

logger = logging.getLogger('FlowScanner')
log_file_handler = logging.FileHandler('FlowScanner.log')
formatter = logging.Formatter('%(asctime)s %(levelname)s:%(message)s')
log_file_handler.setFormatter(formatter)
logger.addHandler(log_file_handler)
logger.setLevel(LOGLEVEL)
logger.setEncoding

def CheckEnvConfig():
    """
    Function to check and verify .env variables.
    """
    configerror = False

    required_variables = ["db_host",
                        "db_username",
                        "db_password",
                        "db_database",
                        "flow_files_folder",
                        "flow_file_move_folder",
                        "known_ip_nets_file",
                        "ip_block_list_file",
                        "nmap_services_file_location",
                        "nmap_tmp_output_folder"]

    for required_variable in required_variables:
        if not os.getenv(required_variable):
            logger.error("Environment variable missing or empty: %s", required_variable)
            configerror = True

    if configerror:
        sys.exit(1)

if __name__ == "__main__":
    logger.info('Application startup...')
    # pylint: disable=line-too-long logger-not-lazy
    logger.info("\n" +
			"███████╗██╗      ██████╗ ██╗    ██╗███████╗ ██████╗ █████╗ ███╗   ██╗███╗   ██╗███████╗██████╗\n" +
			"██╔════╝██║     ██╔═══██╗██║    ██║██╔════╝██╔════╝██╔══██╗████╗  ██║████╗  ██║██╔════╝██╔══██╗\n" +
			"█████╗  ██║     ██║   ██║██║ █╗ ██║███████╗██║     ███████║██╔██╗ ██║██╔██╗ ██║█████╗  ██████╔╝\n" +
			"██╔══╝  ██║     ██║   ██║██║███╗██║╚════██║██║     ██╔══██║██║╚██╗██║██║╚██╗██║██╔══╝  ██╔══██╗\n" +
			"██║     ███████╗╚██████╔╝╚███╔███╔╝███████║╚██████╗██║  ██║██║ ╚████║██║ ╚████║███████╗██║  ██║\n" +
			"╚═╝     ╚══════╝ ╚═════╝  ╚══╝╚══╝ ╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝\n")
    logger.info("Flowscanner version: %s", FlowScanner.VERSION)
    logger.info("Author: Marvin Arets")
    logger.info("marvin.arets@surf.nl")
    logger.info("Checking variables...")
    CheckEnvConfig()
    logger.info("Checks done. Application ready.")
    patterns = ["*"]
    new_flow_file_handler = PatternMatchingEventHandler(patterns, None, False, True)
    nfdump = Nfdump()
    flow_filter = FlowFilter()

def OnCreated(event):
    """
    Event handler for when new file is created. Waits untill creation of
    file is completely done.
    """
    logger.debug('OnCreated event handler called.')
    file_idle_time = 5
    last_modified = os.path.getmtime(event.src_path)
    while last_modified is not None:
        current = time.time()
        last_modified = os.path.getmtime(event.src_path)
        if(current - last_modified) > file_idle_time:
            logger.debug('(current - last_modified) > file_idle_time')
            last_modified = None

    flow_list = None
    server_list = None
    flow_list = nfdump.Filter(event.src_path)
    try:
        if os.getenv('flow_file_move_folder') == "/dev/null":
            logger.debug('Remove, because /dev/null.')
            os.remove(event.src_path)
        else:
            logger.debug('Move file.')
            os.rename(event.src_path, os.getenv('flow_file_move_folder') +
                    '/Netflow_done_' +
                    str(time.time()))
    except OSError as move_exception:
        logger.error("Couldn't (re)move flow file: %s", str(move_exception))
    server_list = flow_filter.ServerFilter(flow_list)
    logger.info('Begin scanning.')
    PerformScans(server_list)
    logger.info('Scanning done.')

new_flow_file_handler.on_created = OnCreated

PATH = os.getenv('flow_files_folder')
flow_file_observer = Observer()
flow_file_observer.schedule(new_flow_file_handler, PATH, False)

flow_file_observer.start()

try:
    while True:
        time.sleep(1)
except KeyboardInterrupt:
    flow_file_observer.stop()
    flow_file_observer.join()
    flow_folder_to_empty = os.getenv('flow_files_folder')
    for file in os.listdir(flow_folder_to_empty):
        try:
            os.remove(os.path.join(flow_folder_to_empty, file))
        except OSError as exception:
            logger.error("Couldn't remove flow file: %s", str(exception))
    nmap_folder_to_empty = os.getenv('nmap_tmp_output_folder')
    for folder in os.listdir(nmap_folder_to_empty):
        try:
            os.rmdir(os.path.join(nmap_folder_to_empty, folder))
        except OSError as exception:
            logger.error("Couldn't remove Nmap folder: %s", str(exception))
    logger.info("Application exit (keyboard interrupt).")
    sys.exit(0)
